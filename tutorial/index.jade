.chapter(data-title='IVR Phone Tree')
  .step(data-file='IVRRecording.Web/Models/Recording.cs',)
    :markdown
      ## About this application

      ![Extra Terrestrial Phone Home
      Service](//howtodocs.s3.amazonaws.com/logo-et-phone2.png)

      This [ASP.NET MVC](//www.asp.net/mvc) sample application is
      modeled after a typical call center experience, but with more [Reese's
      Pieces](//en.wikipedia.org/wiki/Reese%27s_Pieces#ET:_The_Extra-
      Terrestrial).

      Stranded aliens can call a phone number and receive instructions on how to
      get out of earth safely, or call their [home planet](//bit.ly/asogi)
      directly. In this tutorial, we'll show you the key bits of code that allow
      an agent to send a caller to voicemail, and later read transcripts and
      listen to voicemails.

      To run this sample app yourself, [download the code and follow the
      instructions on GitHub](//github.com/TwilioDevEd/ivr-recording-csharp).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also:**
      * [ET IVR Part One: Phone
      Trees](//www.twilio.com/docs/howto/walkthrough/ivr-phone-tree/csharp/mvc)
      * [Getting Started with ASP.NET MVC
      5](//www.asp.net/mvc/overview/getting-started/introduction/getting-started)
      * [The Twilio C# Helper
      Library](//www.twilio.com/docs/csharp/install)

  .step(data-file='IVRRecording.Web/Controllers/ExtensionController.cs',
  data-highlight='20-41')
    :markdown
      ## Route the call to an agent

      When our caller chooses a planet we need to figure out where to route the
      call. Depending on her input we will route this call to an extension. In
      this case an extension will be used to look up an Agent, so any string
      can be used to define an extension. 

      Once we lookup the `Agent`, we can `<Dial>` the agent's phone number and try
      to connect the call. Let's look at those steps next.

      ---

      **See Also:**
      * [Using the Twilio.TwiML Helper
      Library](//www.twilio.com/blog/2012/02/twilio-for-net-developers-part-4-using-the-twilio-twiml-helper-library.html)
      * [Twilio.TwiML](//github.com/twilio/twilio-csharp/wiki/Twilio.TwiML)
      * [TwiML Dial](//www.twilio.com/docs/api/twiml/dial)

  .step(data-file='IVRRecording.Web/Controllers/ExtensionController.cs',
  data-highlight='43-55')
    :markdown
      ## Looking up an Agent

      In this case the Agent model is very simple. The migration used to create it:

      ```
      public class Agent
      {
        public int Id { get; set; }
        public string Extension { get; set; }
        public string PhoneNumber { get; set; }

        public virtual IList<Recording> Recordings { get; set; }
      }
      ```

      We have a handle or `Extension` that we can use to lookup and Agent, and
      we have a `PhoneNumber` that we will call.

      Note that `FindByExtension` is just a wrapper for `FirstOrDefault`.

      ---

      **See Also:**
      * [FirstOrDefault Method](//msdn.microsoft.com/en-us/library/vstudio/bb918914.aspx)

  .step(data-file='IVRRecording.Web/Controllers/ExtensionController.cs', data-highlight='31-40')
    :markdown
      ## Call the Agent

      This code begins the process of transferring the call to our agent.

      By passing a `url` to the `Dial` > [`Number`](//www.twilio.com/docs/api/twiml/number)
      TwiML tag, we are telling Twilio to make a POST request to the
      `Agent/Call` route **after** the agent has picked up but **before**
      connecting the two parties.

      Essentially we are telling Twilio to execute some TwiML that only the
      agent will hear. Let's look at that next.

      ---

      **See Also:**
      * [TwiML Say verb](//www.twilio.com/docs/api/twiml/say)

  .step(data-file='IVRRecording.Web/Controllers/AgentController.cs',
  data-highlight='58-78')
    :markdown
      ## The Agent screens the call

      When our agent picks up their phone, we use a
      [Gather](https://www.twilio.com/docs/api/twiml/gather) verb to ask
      them if they want to accept the call.

      If the agent responds by entering any digit the
      response will be processed by our `Agent/ConnectMessage` route (below)
      which will `<Say>` a quick message, then continue with the original
      `<Dial>` command and connect the two parties.

      If the agent instead does not respond, the processing of the
      caller's `<Dial>` verb will end and Twilio will look to the URL we
      provided for more instructions - we'll look at that route next.

      ---

      **See Also:**
      * [The Gather action attribute](//www.twilio.com/docs/api/twiml/gather#attributes-action)

  .step(data-file='IVRRecording.Web/Controllers/AgentController.cs',
  data-highlight='26-56')
    :markdown
      ## Send the Caller to Voicemail

      When Twilio makes a request to our voicemail controller, it will pass a
      [`DialCallStatus`](//www.twilio.com/docs/api/twiml/dial#attributes-action-dial-call-status-values)
      which will tell us if the call was successful. If it was "completed" we
      hangup â€” otherwise we need to `<Say>` a quick prompt and then
      [Record](//www.twilio.com/docs/api/twiml/record) a voicemail from
      the caller. 

      We also specify an `action` for `<Record>`. This route will be
      called after the call (and hence the recording) has finished. The route
      will say "Goodbye" and then [Hangup](//www.twilio.com/docs/api/twiml/hangup).

      ---

      **See Also:**
      * [Twilio Request
        parameters](//www.twilio.com/docs/api/twiml/twilio_request#synchronous-request-parameters)

  .step(data-file='IVRRecording.Web/Controllers/RecordingController.cs',
  data-highlight='19-34')
    :markdown
      ## Record the Caller

      When we tell Twilio to Record we have a few
      [options](//www.twilio.com/docs/api/twiml/record#attributes) we can
      pass to the `Record` verb. 

      Here we instruct Record to stop the recording at 20 seconds, to
      [`transcribe`](//www.twilio.com/docs/api/twiml/record#attributes-transcribe)
      the call, and where to send the transcription when it's
      complete. Adding the `transcribeCallback` attribute to
      `<Record>` implies `transcribe = true`.

      Notice we redirect to an URL that is specific to an agent. This
      is a convenient way to specify which agent was called to produce
      this voice message. This way we can also save the associated
      agent together with the voicemail.

      ---

      **See Also:**
      * [Twilio transcribeCallback](//www.twilio.com/docs/api/twiml/record#attributes-transcribe-callback)

  .step(data-file='IVRRecording.Web/Controllers/AgentController.cs',
  data-highlight='19-24')
    :markdown
      ## View an Agent's Voicemails

      Once we look up the Agent, all we need to do is display all of her
      recordings. We simply bind the agent with its recordings to a view that
      is then rendered.

      It is possible to look up recordings via the Twilio REST API,
      but since we have all of the data we need in the
      `transcribeCallback` request, we can easily store it ourselves
      and save a roundtrip.

      ---

      **See Also:**
      * [Twilio REST API: Recordings](//www.twilio.com/docs/api/rest/recording)
      * [Twilio REST API: Transcription Resource](//www.twilio.com/docs/api/rest/transcription)

  .step
    :markdown
      ## Where to next?

      That's it! We've just implemented an IVR with real Agents, call
      screening and voicemail. If you're a C# developer working with
      Twilio, you might want to check out these other tutorials.

      [**Part 1 of this Tutorial: ET Phone Home Service - IVR Phone
      Trees**](//www.twilio.com/docs/howto/walkthrough/ivr-phone-tree/csharp/mvc)

      Increase your rate of response by automating the workflows that are key to
      your business.

      [**Appointment
      Reminders**](//www.twilio.com/docs/howto/walkthrough/appointment-reminders/csharp/mvc)

      Send your customers a text message when they have an upcoming
      appointment - this tutorial shows you how to do it from a
      background job.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
